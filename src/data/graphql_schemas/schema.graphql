type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  userIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): UserConnection
  eventIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): EventConnection
  userEventIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): UserEventConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  user: User
  eventList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): EventConnection
  userEventList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): UserEventConnection
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  balance: Int!

  """Account controlling the document"""
  did: CeramicAccount!
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge"""
  node: Event

  """A cursor for use in pagination"""
  cursor: String!
}

type Event implements Node {
  id: ID!
  city: String!
  cost: Int!
  mode: Int!
  name: String!
  venue: String!
  status: Int!
  dateTime: DateTime!
  maxLimit: Int!
  attendees: [EventAttendee]
  description: String!
  creationDate: DateTime!

  """Account controlling the document"""
  creator: CeramicAccount!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type EventAttendee {
  user: String!
  status: Int!
}

"""A connection to a list of items."""
type UserEventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEventEdge]
}

"""An edge in a connection."""
type UserEventEdge {
  """The item at the end of the edge"""
  node: UserEvent

  """A cursor for use in pagination"""
  cursor: String!
}

type UserEvent implements Node {
  id: ID!
  event: ID!
  status: Int!

  """Account controlling the document"""
  attendee: CeramicAccount!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  createUser(input: CreateUserInput!): CreateUserPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  createEvent(input: CreateEventInput!): CreateEventPayload
  updateEvent(input: UpdateEventInput!): UpdateEventPayload
  createUserEvent(input: CreateUserEventInput!): CreateUserEventPayload
  updateUserEvent(input: UpdateUserEventInput!): UpdateUserEventPayload
}

type CreateUserPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: User!
  clientMutationId: String
}

input CreateUserInput {
  content: UserInput!
  clientMutationId: String
}

input UserInput {
  name: String!
  email: String!
  balance: Int!
}

type UpdateUserPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: User!
  clientMutationId: String
}

input UpdateUserInput {
  id: ID!
  content: PartialUserInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialUserInput {
  name: String
  email: String
  balance: Int
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}

"""A Ceramic Commit ID"""
scalar CeramicCommitID @specifiedBy(url: "https://github.com/ceramicnetwork/CIP/blob/main/CIPs/CIP-59/CIP-59.md#commitid")

type CreateEventPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Event!
  clientMutationId: String
}

input CreateEventInput {
  content: EventInput!
  clientMutationId: String
}

input EventInput {
  city: String!
  cost: Int!
  mode: Int!
  name: String!
  venue: String!
  status: Int!
  dateTime: DateTime!
  maxLimit: Int!
  attendees: [EventAttendeeInput]
  description: String!
  creationDate: DateTime!
}

input EventAttendeeInput {
  user: String!
  status: Int!
}

type UpdateEventPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Event!
  clientMutationId: String
}

input UpdateEventInput {
  id: ID!
  content: PartialEventInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialEventInput {
  city: String
  cost: Int
  mode: Int
  name: String
  venue: String
  status: Int
  dateTime: DateTime
  maxLimit: Int
  attendees: [EventAttendeeInput]
  description: String
  creationDate: DateTime
}

type CreateUserEventPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: UserEvent!
  clientMutationId: String
}

input CreateUserEventInput {
  content: UserEventInput!
  clientMutationId: String
}

input UserEventInput {
  event: ID!
  status: Int!
}

type UpdateUserEventPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: UserEvent!
  clientMutationId: String
}

input UpdateUserEventInput {
  id: ID!
  content: PartialUserEventInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialUserEventInput {
  event: ID
  status: Int
}